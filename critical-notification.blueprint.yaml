blueprint:
  name: Critical notifications
  description: Sending critical notifications
  domain: automation
  # homeassistant:
  #   min_version: ? #TODO
  input:
    sensors:
      name: Sensors
      selector:
        entity: # TODO try triggers once more
          multiple: true
          filter:
            - domain: [binary_sensor, input_boolean]
    format_notification_action:
      name: The action of converting the sensor state into a formatted notification 
      selector:
        action:
      default:
        - variables:
            notification_state:
              label: "{{ state_attr(sensor_entity_id, 'friendly_name') }}"
              is_active: "{{ states(sensor_entity_id) == 'on' }}"
    todo_list:
      name: To-do list
      selector:
        entity:
          filter:
            - domain: todo
      # default: # TODO Not required
    stop_notifications_button: # TODO implement
      name: The button to stop repeat actions
      selector:
        entity:
          filter:
            - domain: input_button
    onetime_notification_actions:
      name: One-time notification actions
      selector:
        action:
      default:
        - action: persistent_notification.create
          enabled: false
          data:
            title: Critical notification
            notification_id: critical_notification
            message: "{{ computed_notifications.with_todo_list.formatted_all }}"
    action_repeat_interval:
      name: Interval between actions
      selector:
        duration:
    repeat_notification_actions:
      name: Repeatable notification actions
      selector:
        action:
      default:
        - action: notify.send_message
          alias: Example of periodic notification sending (use your own sending action)
          enabled: false
          data:
            title: Critical notification
            message: "{{ computed_notifications.without_todo_list.formatted_all }}"
mode: parallel
max: 30
triggers:
  - trigger: event
    id: todo_list_update
    event_type: call_service
    event_data:
      domain: todo
      service: add_item
      service_data:
        entity_id: [!input todo_list]
  - trigger: event
    id: todo_list_update
    event_type: call_service
    event_data:
      domain: todo
      service: remove_item
      service_data:
        entity_id: [!input todo_list]
  - trigger: event
    id: todo_list_update
    event_type: call_service
    event_data:
      domain: todo
      service: update_item
      service_data:
        entity_id: [!input todo_list]
  - trigger: state
    id: sensors_update
    entity_id: !input sensors
  - trigger: homeassistant
    id: homeassistant_start
    event: start
actions:
  - event: critical_notification_start
  - if:
    - condition: trigger
      id: [todo_list_update]
    then:
      # TODO Risk of missing the critical_notification_start event
      - delay:
          milliseconds: 100
  - action: todo.get_items
    metadata: {}
    data:
      status:
        - needs_action
        - completed
    target:
      entity_id: !input todo_list
    response_variable: todo_items_response
  - variables:
      todo_list_entity_id: !input todo_list
      todo_list_items: "{{ todo_items_response[todo_list_entity_id]['items'] | list }}"
      notifications_states: []
  - repeat:
      for_each: !input sensors
      sequence:
        - variables:
            sensor_entity_id: "{{ repeat.item }}"
        - sequence: !input format_notification_action
        - variables:
            notifications_states: >
              {{ notifications_states + [{
                'sensor_entity_id': repeat.item,
                'label': notification_state.label,
                'is_active': notification_state.is_active,
              }] }}
  - choose:
    - conditions:
        - condition: trigger
          id: [sensors_update]
      sequence:
        - repeat:
            for_each: "{{ notifications_states }}"
            sequence:
              - variables:
                  notification_state: "{{repeat.item}}"
                  has_notification_state_label_in_todo_list: >
                    {{ todo_list_items | selectattr('summary', '==', notification_state.label) | first is defined }}
              - choose:
                - conditions:
                  - condition: template
                    value_template: >
                      {{ notification_state.is_active == true and not has_notification_state_label_in_todo_list }}
                  sequence:
                    - action: todo.add_item
                      target:
                        entity_id: !input todo_list
                      data:
                        item: "{{ notification_state.label }}"
                - conditions:
                  - condition: template
                    value_template: >
                      {{ notification_state.is_active == false and has_notification_state_label_in_todo_list }}
                  sequence:
                    - action: todo.remove_item
                      target:
                        entity_id: !input todo_list
                      data:
                        item: "{{ notification_state.label }}"
    - conditions:
        - condition: trigger
          id: [todo_list_update]
      sequence:
        - variables:
            can_repeat_actions: true
        - parallel:
            - sequence:
                # state ‚Üí {sensor_entity_id, label, is_active}
                # todo ‚Üí {summary, uid, status}
                # object ‚Üí {label, notification_state?, todo_list_item}

                # Keep the order the same as in the TODO list
                - variables:
                    computed_notifications: >
                      {% macro build_object_macro(todo_item, state_item, returns) %}
                        {% if state_item is defined %}
                          {% do returns({
                            'label': todo_item.summary,
                            'notification_state': state_item,
                            'todo_list_item': todo_item,
                          }) %}
                        {% else %}
                          {% do returns({
                            'label': todo_item.summary,
                            'todo_list_item': todo_item,
                          }) %}
                        {% endif %}
                      {% endmacro %}
                      {% set build_object = build_object_macro | as_function %}

                      {% macro format_all_notifications_macro(critical_objects, deactivated_objects, attribute_name, returns) %}
                        {% do returns(
                          (critical_objects | map(attribute=attribute_name) | map('regex_replace', '^', '‚ö†Ô∏è ') | list
                            + deactivated_objects | map(attribute=attribute_name) | map('regex_replace', '^', 'üîï ') | list
                          ) | join('\n')
                        ) %}
                      {% endmacro %}
                      {% set format_all_notifications = format_all_notifications_macro | as_function %}

                      {% set ref = namespace({
                        'critical_states': [],
                        'deactivated_states': [],
                        'critical_objects': [],
                        'deactivated_objects': [],
                      }) %}
                      {% set active_states = notifications_states | selectattr('is_active', '==', true) | list %}

                      {% for todo_item in todo_list_items %}
                        {% set state_item = active_states | selectattr('label', '==', todo_item.summary) | first %}
                        {% if todo_item['status'] == 'completed' %}
                          {% if state_item is defined %}
                            {% set ref.deactivated_states = ref.deactivated_states + [state_item] %}
                            {% set ref.deactivated_objects = ref.deactivated_objects + [build_object(todo_item, state_item)] %}
                          {% else %}
                            {% set ref.deactivated_objects = ref.deactivated_objects + [build_object(todo_item, state_item)] %}
                          {% endif %}
                        {% else %}
                          {% if state_item is defined %}
                            {% set ref.critical_states = ref.critical_states + [state_item] %}
                            {% set ref.critical_objects = ref.critical_objects + [build_object(todo_item, state_item)] %}
                          {% else %}
                            {% set ref.critical_objects = ref.critical_objects + [build_object(todo_item, state_item)] %}
                          {% endif %}
                        {% endif %}
                      {% endfor %}

                      {% set has_critical_states = ref.critical_states | first is defined %}
                      {% set has_critical_objects = ref.critical_objects | first is defined %}

                      {{ {
                        'active_notification_states': active_states,
                        'without_todo_list': {
                          'deactivated': ref.deactivated_states,
                          'critical': ref.critical_states,
                          'has_critical': has_critical_states,
                          'has_any': has_critical_states or ref.deactivated_states | first is defined,
                          'formatted_all': format_all_notifications(ref.critical_states, ref.deactivated_states, 'label'),
                        },
                        'with_todo_list': {
                          'deactivated': ref.deactivated_objects,
                          'critical': ref.critical_objects,
                          'has_critical': has_critical_objects,
                          'has_any': has_critical_objects or ref.deactivated_objects | first is defined,
                          'formatted_all': format_all_notifications(ref.critical_objects, ref.deactivated_objects, 'label'),
                        }
                      } }}
                - if:
                    - condition: template
                      value_template: "{{ notifications_without_todo_list.has_any == true }}"
                  then:
                    - repeat:
                        while:
                          - condition: template
                            value_template: "{{ can_repeat_actions }}"
                        sequence:
                          - sequence: !input repeat_notification_actions
                          - wait_for_trigger:
                              - trigger: event
                                event_type: critical_notification_start
                            timeout: !input action_repeat_interval
                            continue_on_timeout: true
            - sequence:
                - wait_for_trigger:
                    - trigger: event
                      event_type: critical_notification_start
                - variables:
                    can_repeat_actions: false
